<!DOCTYPE html>
<html>
    <head>
        <title>Runboat builds</title>
        <style>
            body {
                font-family: Arial, Helvetica, sans-serif;
            }
            .repo-group {
                margin-bottom: 1em;
                border: 1px solid #ddd;
                border-radius: 0.5em;
                padding: 0.5em;
            }
            .repo-title {
                font-weight: bold;
                font-size: 1.1em;
                margin-bottom: 0.5em;
                color: #333;
                cursor: pointer;
                display: flex;
                align-items: center;
                user-select: none;
            }
            .repo-collapse-icon {
                margin-right: 0.5em;
                transition: transform 0.2s ease;
                font-size: 0.8em;
            }
            .repo-collapse-icon.collapsed {
                transform: rotate(-90deg);
            }
            .repo-content {
                transition: max-height 0.3s ease-out, opacity 0.3s ease-out;
                overflow: hidden;
            }
            .repo-content.collapsed {
                max-height: 0;
                opacity: 0;
            }
            .repo-content.expanded {
                max-height: 2000px;
                opacity: 1;
            }
            .row {
                display: flex;
                flex-direction: row;
                flex-wrap: wrap;
                border-style: none none solid none;
                border-width: thin;
                border-color: lightgray;
                margin-bottom: 0.5em;
            }
            .row:last-child {
                border-bottom: none;
            }
            .branch-title {
                font-weight: bold;
                font-size: 0.9em;
                margin-bottom: 0.25em;
                color: #666;
                width: 100%;
                display: flex;
                align-items: center;
            }
            .refresh-icon {
                margin-right: 0.5em;
                cursor: pointer;
                font-size: 0.9em;
                color: #000000;
                user-select: none;
                transition: transform 0.2s ease;
            }
            .refresh-icon:hover {
                color: #000000;
                transform: rotate(180deg);
            }
            .refresh-icon.spinning {
                animation: spin 1s linear infinite;
            }
            @keyframes spin {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }
            runboat-build {
                margin: 0.25em;
            }
            #footer {
                color: gray;
                font-size: small;
            }
        </style>
    </head>
    <body>
        <div id="builds">Connecting...</div>
        <div id="footer">
            {{ footer_html }}
            {{ additional_footer_html }}
        </div>
        <script type="module">
            import {RunboatBuildElement} from './runboat-build-element.js'
            customElements.define('runboat-build', RunboatBuildElement);

            var evtSource = null;

            function onopen(event) {
                console.log("connected");
                document.getElementById("builds").innerHTML = '';
            }

            function onmessage(event) {
                var oEvent = JSON.parse(event.data);
                var buildElement = document.getElementById(oEvent.build.name);
                if (oEvent.event == "upd") {
                    if (buildElement) {
                        // update build element
                        buildElement.build = oEvent.build;
                    } else {
                        const repo = oEvent.build.commit_info.repo;
                        const branch = oEvent.build.commit_info.target_branch;
                        
                        // Get or create repo group
                        var repoGroupId = `repo-${repo.replace(/[^a-zA-Z0-9]/g, '-')}`;
                        var repoGroupElement = document.getElementById(repoGroupId);
                        if (!repoGroupElement) {
                            repoGroupElement = document.createElement("div");
                            repoGroupElement.classList.add("repo-group");
                            repoGroupElement.id = repoGroupId;
                            
                            const repoTitle = document.createElement("div");
                            repoTitle.classList.add("repo-title");
                            repoTitle.onclick = () => toggleRepoCollapse(repoGroupId);
                            
                            const collapseIcon = document.createElement("span");
                            collapseIcon.classList.add("repo-collapse-icon");
                            collapseIcon.textContent = "▼";
                            
                            const repoText = document.createElement("span");
                            repoText.textContent = repo;
                            
                            repoTitle.appendChild(collapseIcon);
                            repoTitle.appendChild(repoText);
                            
                            const repoContent = document.createElement("div");
                            repoContent.classList.add("repo-content", "expanded");
                            repoContent.id = `${repoGroupId}-content`;
                            
                            repoGroupElement.appendChild(repoTitle);
                            repoGroupElement.appendChild(repoContent);
                            
                            const buildsElement = document.getElementById("builds");
                            buildsElement.insertBefore(repoGroupElement, buildsElement.firstChild);
                        }
                        
                        // Get repo content container
                        const repoContent = document.getElementById(`${repoGroupId}-content`);
                        
                        // Get or create branch row within repo content
                        var rowId = `${repoGroupId}-branch-${branch.replace(/[^a-zA-Z0-9]/g, '-')}`;
                        if (oEvent.build.commit_info.pr) {
                            rowId += `-pr-${oEvent.build.commit_info.pr}`;
                        }
                        var rowElement = document.getElementById(rowId);
                        if (!rowElement) {
                            // create branch title and row
                            const branchTitle = document.createElement("div");
                            branchTitle.classList.add("branch-title");
                            
                            // Add refresh icon for branches (not PRs)
                            if (!oEvent.build.commit_info.pr) {
                                const refreshIcon = document.createElement("span");
                                refreshIcon.classList.add("refresh-icon");
                                refreshIcon.textContent = "↻";
                                refreshIcon.title = `Refresh ${branch} branch`;
                                refreshIcon.onclick = (e) => {
                                    e.stopPropagation();
                                    triggerBranchRefresh(repo, branch, refreshIcon);
                                };
                                branchTitle.appendChild(refreshIcon);
                            }
                            
                            const branchText = document.createElement("span");
                            branchText.textContent = `${branch}${oEvent.build.commit_info.pr ? ` (PR #${oEvent.build.commit_info.pr})` : ''}`;
                            branchTitle.appendChild(branchText);
                            
                            rowElement = document.createElement("div");
                            rowElement.classList.add("row");
                            rowElement.id = rowId;
                            
                            repoContent.appendChild(branchTitle);
                            repoContent.appendChild(rowElement);
                        }
                        
                        // add build element to row
                        buildElement = document.createElement("runboat-build");
                        buildElement.id = oEvent.build.name;
                        buildElement.build = oEvent.build;
                        rowElement.insertBefore(buildElement, rowElement.firstChild);
                    }
                } else if (oEvent.event == "del") {
                    if (buildElement) {
                        buildElement.remove();
                    }
                }
            }

            function toggleRepoCollapse(repoGroupId) {
                const repoContent = document.getElementById(`${repoGroupId}-content`);
                const collapseIcon = document.querySelector(`#${repoGroupId} .repo-collapse-icon`);
                
                if (repoContent.classList.contains('collapsed')) {
                    // Expand
                    repoContent.classList.remove('collapsed');
                    repoContent.classList.add('expanded');
                    collapseIcon.classList.remove('collapsed');
                } else {
                    // Collapse
                    repoContent.classList.remove('expanded');
                    repoContent.classList.add('collapsed');
                    collapseIcon.classList.add('collapsed');
                }
            }

            async function triggerBranchRefresh(repo, branch, refreshIcon) {
                try {
                    // Add spinning animation
                    refreshIcon.classList.add('spinning');
                    
                    // Try with query parameters first
                    const url = `/api/v1/builds/trigger/branch?repo=${encodeURIComponent(repo)}&branch=${encodeURIComponent(branch)}`;
                    const response = await fetch(url, {
                        method: 'POST'
                    });
                    
                    if (response.ok) {
                        console.log(`Successfully triggered refresh for ${repo}/${branch}`);
                    } else {
                        console.error(`Failed to trigger refresh: ${response.status} ${response.statusText}`);
                        // Try with JSON body as fallback
                        const jsonResponse = await fetch('/api/v1/builds/trigger/branch', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                repo: repo,
                                branch: branch
                            })
                        });
                        
                        if (jsonResponse.ok) {
                            console.log(`Successfully triggered refresh for ${repo}/${branch} (JSON format)`);
                        } else {
                            console.error(`Failed with JSON too: ${jsonResponse.status} ${jsonResponse.statusText}`);
                        }
                    }
                } catch (error) {
                    console.error(`Error triggering refresh:`, error);
                } finally {
                    // Remove spinning animation after 2 seconds
                    setTimeout(() => {
                        refreshIcon.classList.remove('spinning');
                    }, 2000);
                }
            }

            function onerror(event) {
                evtSource.close();
                console.log("error, will attempt to reconnect");
                setTimeout(connect, 10000);
            }

            function connect() {
                console.log("connecting...")
                var url = `/api/v1/build-events${window.location.search}`
                evtSource = new EventSource(url);
                evtSource.onopen = onopen;
                evtSource.onmessage = onmessage;
                evtSource.onerror = onerror;
            }

            connect();
        </script>
    </body>
</html>